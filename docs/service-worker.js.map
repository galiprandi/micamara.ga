{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messages.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/assert.js","../node_modules/workbox-core/_private/logger.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/NavigationRoute.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-routing/setCatchHandler.js","../node_modules/workbox-routing/setDefaultHandler.js","../node_modules/workbox-routing/index.js","../node_modules/workbox-routing/index.mjs","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/utils/pluginUtils.js","../node_modules/workbox-core/_private/cacheWrapper.js","../node_modules/workbox-core/_private/fetchWrapper.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/utils/messages.js","../node_modules/workbox-strategies/CacheFirst.js","../node_modules/workbox-strategies/CacheOnly.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/NetworkFirst.js","../node_modules/workbox-strategies/NetworkOnly.js","../node_modules/workbox-strategies/StaleWhileRevalidate.js","../node_modules/workbox-strategies/index.js","../node_modules/workbox-strategies/index.mjs","service-worker.js"],"names":["messages","paramName","validValueDescription","value","Error","JSON","stringify","moduleName","className","funcName","expectedType","expectedClass","isReturnValueProblem","name","expectedMethod","entry","firstEntry","secondEntry","_entryId","thrownError","message","cacheNameId","method","methodName","normalizedRangeHeader","size","start","end","url","error","status","cacheName","fallback","code","args","msg","length","generatorFunction","details","messageGenerator","WorkboxError","constructor","errorCode","isArray","Array","hasMethod","object","type","isType","isInstance","isOneOf","validValues","includes","isArrayOfClass","item","finalAssertExports","logger","defaultMethod","validMethods","normalizeHandler","handler","handle","Route","match","NavigationRoute","allowlist","denylist","options","_match","_allowlist","_denylist","request","mode","pathnameAndSearch","pathname","search","regExp","test","some","RegExpRoute","result","exec","href","origin","location","index","slice","getFriendlyURL","urlObj","URL","String","replace","RegExp","Router","_routes","Map","routes","addFetchListener","self","addEventListener","event","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","requestPromises","Promise","all","urlsToCache","map","Request","waitUntil","ports","then","postMessage","protocol","startsWith","params","route","findMatchingRoute","_defaultHandler","err","reject","_catchHandler","catch","get","matchResult","undefined","Object","keys","setDefaultHandler","setCatchHandler","registerRoute","has","set","push","unregisterRoute","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","matchCallback","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","filter","join","eachCacheNameDetail","fn","key","cacheNames","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","quotaErrorCallbacks","Set","executeQuotaErrorCallbacks","callback","pluginUtils","plugins","callbackName","plugin","_getEffectiveRequest","cacheKeyWillBeUsedPlugins","effectiveRequest","call","_isResponseSafeToCache","response","responseToCache","pluginsUsed","pluginMethod","matchWrapper","matchOptions","cache","caches","open","cachedResponse","putWrapper","updatePlugins","oldResponse","put","newResponse","cacheWrapper","wrappedFetch","fetchOptions","FetchEvent","preloadResponse","possiblePreloadResponse","failedFetchPlugins","originalRequest","clone","requestClone","pluginFilteredRequest","fetchResponse","fetch","fetchWrapper","strategyStart","strategyName","printFinalResponse","groupCollapsed","log","groupEnd","CacheFirst","_cacheName","_plugins","_fetchOptions","_matchOptions","_getFromNetwork","responseClone","cachePutPromise","CacheOnly","cacheOkAndOpaquePlugin","cacheWillUpdate","NetworkFirst","isUsingCacheWillUpdate","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","promise","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","resolve","setTimeout","_respondFromCache","clearTimeout","cachePut","NetworkOnly","StaleWhileRevalidate","fetchAndCachePromise","importScripts","destination"],"mappings":"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","file":"service-worker.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:5.1.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return `The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`;\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className ? (className + '.') : ''}` +\n            `${funcName}()' must be of type ${expectedType}.`;\n    },\n    'incorrect-class': ({ expectedClass, paramName, moduleName, className, funcName, isReturnValueProblem }) => {\n        if (!expectedClass || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        if (isReturnValueProblem) {\n            return `The return value from ` +\n                `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\n                `must be an instance of class ${expectedClass.name}.`;\n        }\n        return `The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className ? (className + '.') : ''}${funcName}()' ` +\n            `must be an instance of class ${expectedClass.name}.`;\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName }) => {\n        if (!expectedMethod || !paramName || !moduleName || !className\n            || !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return `${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return `An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`;\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` +\n                `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry._entryId} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`;\n    },\n    'plugin-error-request-will-fetch': ({ thrownError }) => {\n        if (!thrownError) {\n            throw new Error(`Unexpected input to ` +\n                `'plugin-error-request-will-fetch', error.`);\n        }\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownError.message}'.`;\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return `You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`;\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return `The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`;\n    },\n    'unregister-route-route-not-registered': () => {\n        return `The route you're trying to unregister was not previously ` +\n            `registered.`;\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return `The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return `The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`;\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`;\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName }) => {\n        return `The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`;\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return `You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`;\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return `When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`;\n    },\n    'channel-name-required': () => {\n        return `You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`;\n    },\n    'invalid-responses-are-same-args': () => {\n        return `The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`;\n    },\n    'expire-custom-caches-only': () => {\n        return `You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`;\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return `Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return `The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`;\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return `The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return `Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`;\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return `There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`;\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return `The precaching request for '${url}' failed with an HTTP ` +\n            `status of ${status}.`;\n    },\n    'non-precached-url': ({ url }) => {\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`;\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return `Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`;\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, expectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClass'] = expectedClass;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] =\n            `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, expectedClass, details) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n    hasMethod,\n    isArray,\n    isInstance,\n    isOneOf,\n    isType,\n    isArrayOfClass,\n};\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:5.1.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * [Route]{@link module:workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` +\n                    `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { NavigationRoute } from './NavigationRoute.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { registerRoute } from './registerRoute.js';\nimport { Route } from './Route.js';\nimport { Router } from './Router.js';\nimport { setCatchHandler } from './setCatchHandler.js';\nimport { setDefaultHandler } from './setDefaultHandler.js';\nimport './_version.js';\n/**\n * @module workbox-routing\n */\nexport { NavigationRoute, RegExpRoute, registerRoute, Route, Router, setCatchHandler, setDefaultHandler, };\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const pluginUtils = {\n    filter: (plugins, callbackName) => {\n        return plugins.filter((plugin) => callbackName in plugin);\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from './assert.js';\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from './getFriendlyURL.js';\nimport { logger } from './logger.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport { WorkboxError } from './WorkboxError.js';\nimport '../_version.js';\n/**\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\n * executes any of those callbacks found in sequence. The final `Request` object\n * returned by the last plugin is treated as the cache key for cache reads\n * and/or writes.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {string} options.mode\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Request>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _getEffectiveRequest = async ({ request, mode, plugins = [], }) => {\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */);\n    let effectiveRequest = request;\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\n        effectiveRequest = await plugin[\"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */].call(plugin, { mode, request: effectiveRequest });\n        if (typeof effectiveRequest === 'string') {\n            effectiveRequest = new Request(effectiveRequest);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(effectiveRequest, Request, {\n                moduleName: 'Plugin',\n                funcName: \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */,\n                isReturnValueProblem: true,\n            });\n        }\n    }\n    return effectiveRequest;\n};\n/**\n * This method will call cacheWillUpdate on the available plugins (or use\n * status === 200) to determine if the Response is safe and valid to cache.\n *\n * @param {Object} options\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst _isResponseSafeToCache = async ({ request, response, event, plugins = [], }) => {\n    let responseToCache = response;\n    let pluginsUsed = false;\n    for (const plugin of plugins) {\n        if (\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */ in plugin) {\n            pluginsUsed = true;\n            const pluginMethod = plugin[\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */];\n            responseToCache = await pluginMethod.call(plugin, {\n                request,\n                response: responseToCache,\n                event,\n            });\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    assert.isInstance(responseToCache, Response, {\n                        moduleName: 'Plugin',\n                        funcName: \"cacheWillUpdate\" /* CACHE_WILL_UPDATE */,\n                        isReturnValueProblem: true,\n                    });\n                }\n            }\n            if (!responseToCache) {\n                break;\n            }\n        }\n    }\n    if (!pluginsUsed) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (responseToCache) {\n                if (responseToCache.status !== 200) {\n                    if (responseToCache.status === 0) {\n                        logger.warn(`The response for '${request.url}' is an opaque ` +\n                            `response. The caching strategy that you're using will not ` +\n                            `cache opaque responses by default.`);\n                    }\n                    else {\n                        logger.debug(`The response for '${request.url}' returned ` +\n                            `a status code of '${response.status}' and won't be cached as a ` +\n                            `result.`);\n                    }\n                }\n            }\n        }\n        responseToCache = responseToCache && responseToCache.status === 200 ?\n            responseToCache : undefined;\n    }\n    return responseToCache ? responseToCache : null;\n};\n/**\n * This is a wrapper around cache.match().\n *\n * @param {Object} options\n * @param {string} options.cacheName Name of the cache to match against.\n * @param {Request} options.request The Request that will be used to look up\n *     cache entries.\n * @param {Event} [options.event] The event that prompted the action.\n * @param {Object} [options.matchOptions] Options passed to cache.match().\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\n * @return {Response} A cached response if available.\n *\n * @private\n * @memberof module:workbox-core\n */\nconst matchWrapper = async ({ cacheName, request, event, matchOptions, plugins = [], }) => {\n    const cache = await self.caches.open(cacheName);\n    const effectiveRequest = await _getEffectiveRequest({\n        plugins, request, mode: 'read'\n    });\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\n    if (process.env.NODE_ENV !== 'production') {\n        if (cachedResponse) {\n            logger.debug(`Found a cached response in '${cacheName}'.`);\n        }\n        else {\n            logger.debug(`No cached response found in '${cacheName}'.`);\n        }\n    }\n    for (const plugin of plugins) {\n        if (\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */ in plugin) {\n            const pluginMethod = plugin[\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */];\n            cachedResponse = await pluginMethod.call(plugin, {\n                cacheName,\n                event,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n            });\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachedResponse) {\n                    assert.isInstance(cachedResponse, Response, {\n                        moduleName: 'Plugin',\n                        funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                        isReturnValueProblem: true,\n                    });\n                }\n            }\n        }\n    }\n    return cachedResponse;\n};\n/**\n * Wrapper around cache.put().\n *\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\n * `matchOptions` when determining what the old entry is.\n *\n * @param {Object} options\n * @param {string} options.cacheName\n * @param {Request} options.request\n * @param {Response} options.response\n * @param {Event} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @param {Object} [options.matchOptions]\n *\n * @private\n * @memberof module:workbox-core\n */\nconst putWrapper = async ({ cacheName, request, response, event, plugins = [], matchOptions, }) => {\n    if (process.env.NODE_ENV !== 'production') {\n        if (request.method && request.method !== 'GET') {\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\n                url: getFriendlyURL(request.url),\n                method: request.method,\n            });\n        }\n    }\n    const effectiveRequest = await _getEffectiveRequest({\n        plugins, request, mode: 'write'\n    });\n    if (!response) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Cannot cache non-existent response for ` +\n                `'${getFriendlyURL(effectiveRequest.url)}'.`);\n        }\n        throw new WorkboxError('cache-put-with-no-response', {\n            url: getFriendlyURL(effectiveRequest.url),\n        });\n    }\n    const responseToCache = await _isResponseSafeToCache({\n        event,\n        plugins,\n        response,\n        request: effectiveRequest,\n    });\n    if (!responseToCache) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\n                `not be cached.`, responseToCache);\n        }\n        return;\n    }\n    const cache = await self.caches.open(cacheName);\n    const updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\" /* CACHE_DID_UPDATE */);\n    const oldResponse = updatePlugins.length > 0 ?\n        await matchWrapper({ cacheName, matchOptions, request: effectiveRequest }) :\n        null;\n    if (process.env.NODE_ENV !== 'production') {\n        logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\n            `${getFriendlyURL(effectiveRequest.url)}.`);\n    }\n    try {\n        await cache.put(effectiveRequest, responseToCache);\n    }\n    catch (error) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n        if (error.name === 'QuotaExceededError') {\n            await executeQuotaErrorCallbacks();\n        }\n        throw error;\n    }\n    for (const plugin of updatePlugins) {\n        await plugin[\"cacheDidUpdate\" /* CACHE_DID_UPDATE */].call(plugin, {\n            cacheName,\n            event,\n            oldResponse,\n            newResponse: responseToCache,\n            request: effectiveRequest,\n        });\n    }\n};\nexport const cacheWrapper = {\n    put: putWrapper,\n    match: matchWrapper,\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from './WorkboxError.js';\nimport { logger } from './logger.js';\nimport { assert } from './assert.js';\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\nimport { pluginUtils } from '../utils/pluginUtils.js';\nimport '../_version.js';\n/**\n * Wrapper around the fetch API.\n *\n * Will call requestWillFetch on available plugins.\n *\n * @param {Object} options\n * @param {Request|string} options.request\n * @param {Object} [options.fetchOptions]\n * @param {ExtendableEvent} [options.event]\n * @param {Array<Object>} [options.plugins=[]]\n * @return {Promise<Response>}\n *\n * @private\n * @memberof module:workbox-core\n */\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\n    if (typeof request === 'string') {\n        request = new Request(request);\n    }\n    // We *should* be able to call `await event.preloadResponse` even if it's\n    // undefined, but for some reason, doing so leads to errors in our Node unit\n    // tests. To work around that, explicitly check preloadResponse's value first.\n    if (event instanceof FetchEvent && event.preloadResponse) {\n        const possiblePreloadResponse = await event.preloadResponse;\n        if (possiblePreloadResponse) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Using a preloaded navigation response for ` +\n                    `'${getFriendlyURL(request.url)}'`);\n            }\n            return possiblePreloadResponse;\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n            paramName: 'request',\n            expectedClass: Request,\n            moduleName: 'workbox-core',\n            className: 'fetchWrapper',\n            funcName: 'wrappedFetch',\n        });\n    }\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\n    // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n    const originalRequest = failedFetchPlugins.length > 0 ?\n        request.clone() : null;\n    try {\n        for (const plugin of plugins) {\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\n                const requestClone = request.clone();\n                request = await pluginMethod.call(plugin, {\n                    request: requestClone,\n                    event,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (request) {\n                        assert.isInstance(request, Request, {\n                            moduleName: 'Plugin',\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    catch (err) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n            thrownError: err,\n        });\n    }\n    // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (Most likely from a `fetch` event) to be different\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\n    const pluginFilteredRequest = request.clone();\n    try {\n        let fetchResponse;\n        // See https://github.com/GoogleChrome/workbox/issues/1796\n        if (request.mode === 'navigate') {\n            fetchResponse = await fetch(request);\n        }\n        else {\n            fetchResponse = await fetch(request, fetchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\n                `status '${fetchResponse.status}'.`);\n        }\n        for (const plugin of plugins) {\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\n                    .call(plugin, {\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n                if (process.env.NODE_ENV !== 'production') {\n                    if (fetchResponse) {\n                        assert.isInstance(fetchResponse, Response, {\n                            moduleName: 'Plugin',\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\n                            isReturnValueProblem: true,\n                        });\n                    }\n                }\n            }\n        }\n        return fetchResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.error(`Network request for ` +\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\n        }\n        for (const plugin of failedFetchPlugins) {\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\n                error,\n                event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone(),\n            });\n        }\n        throw error;\n    }\n};\nconst fetchWrapper = {\n    fetch: wrappedFetch,\n};\nexport { fetchWrapper };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:5.1.3'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheFirst',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await this._getFromNetwork(request, event);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * Handles the network and cache part of CacheFirst.\n     *\n     * @param {Request} request\n     * @param {Event} [event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork(request, event) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        // Keep the service worker while we put the request to the cache\n        const responseClone = response.clone();\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: responseClone,\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [cache-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass CacheOnly {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'CacheOnly',\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('CacheOnly', request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this._cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} options.networkTimeoutSeconds If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: 'NetworkFirst',\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkFirst',\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, event, logs });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, event, logs });\n        promises.push(networkPromise);\n        // Promise.race() will resolve as soon as the first promise resolves.\n        let response = await Promise.race(promises);\n        // If Promise.race() resolved with null, it might be due to a network\n        // timeout + a cache miss. If that were to happen, we'd rather wait until\n        // the networkPromise resolves instead of returning null.\n        // Note that it's fine to await an already-resolved promise, so we don't\n        // have to check to see if it's still \"in flight\".\n        if (!response) {\n            response = await networkPromise;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkFirst', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, event }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await this._respondFromCache({ request, event }));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, event }) {\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await this._respondFromCache({ request, event });\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this._cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this._cacheName}' cache.`);\n                }\n            }\n        }\n        else {\n            // Keep the service worker alive while we put the request in the cache\n            const responseClone = response.clone();\n            const cachePut = cacheWrapper.put({\n                cacheName: this._cacheName,\n                request,\n                response: responseClone,\n                event,\n                plugins: this._plugins,\n            });\n            if (event) {\n                try {\n                    // The event has been responded to so we can keep the SW alive to\n                    // respond to the request\n                    event.waitUntil(cachePut);\n                }\n                catch (err) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        return response;\n    }\n    /**\n     * Used if the network timeouts or fails to make the request.\n     *\n     * @param {Object} options\n     * @param {Request} request The request to match in the cache\n     * @param {Event} [options.event]\n     * @return {Promise<Object>}\n     *\n     * @private\n     */\n    _respondFromCache({ event, request }) {\n        return cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-only}\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}.\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass NetworkOnly {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     */\n    constructor(options = {}) {\n        this._plugins = options.plugins || [];\n        this._fetchOptions = options.fetchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request The request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'NetworkOnly',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        let error;\n        let response;\n        try {\n            response = await fetchWrapper.fetch({\n                request,\n                event,\n                fetchOptions: this._fetchOptions,\n                plugins: this._plugins,\n            });\n        }\n        catch (err) {\n            error = err;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('NetworkOnly', request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { messages } from './utils/messages.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate {\n    /**\n     * @param {Object} options\n     * @param {string} options.cacheName Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} options.plugins [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} options.fetchOptions Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of all fetch() requests made by this strategy.\n     * @param {Object} options.matchOptions [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        this._cacheName = cacheNames.getRuntimeName(options.cacheName);\n        this._plugins = options.plugins || [];\n        if (options.plugins) {\n            const isUsingCacheWillUpdate = options.plugins.some((plugin) => !!plugin.cacheWillUpdate);\n            this._plugins = isUsingCacheWillUpdate ?\n                options.plugins : [cacheOkAndOpaquePlugin, ...options.plugins];\n        }\n        else {\n            // No plugins passed in, use the default plugin.\n            this._plugins = [cacheOkAndOpaquePlugin];\n        }\n        this._fetchOptions = options.fetchOptions;\n        this._matchOptions = options.matchOptions;\n    }\n    /**\n     * This method will perform a request strategy and follows an API that\n     * will work with the\n     * [Workbox Router]{@link module:workbox-routing.Router}.\n     *\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {Event} [options.event] The event that triggered the request.\n     * @return {Promise<Response>}\n     */\n    async handle({ event, request }) {\n        const logs = [];\n        if (typeof request === 'string') {\n            request = new Request(request);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: 'StaleWhileRevalidate',\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = this._getFromNetwork({ request, event });\n        let response = await cacheWrapper.match({\n            cacheName: this._cacheName,\n            request,\n            event,\n            matchOptions: this._matchOptions,\n            plugins: this._plugins,\n        });\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this._cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n            if (event) {\n                try {\n                    event.waitUntil(fetchAndCachePromise);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive when ` +\n                            `updating cache for '${getFriendlyURL(request.url)}'.`);\n                    }\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this._cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart('StaleWhileRevalidate', request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Event} [options.event]\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getFromNetwork({ request, event }) {\n        const response = await fetchWrapper.fetch({\n            request,\n            event,\n            fetchOptions: this._fetchOptions,\n            plugins: this._plugins,\n        });\n        const cachePutPromise = cacheWrapper.put({\n            cacheName: this._cacheName,\n            request,\n            response: response.clone(),\n            event,\n            plugins: this._plugins,\n        });\n        if (event) {\n            try {\n                event.waitUntil(cachePutPromise);\n            }\n            catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to ensure service worker stays alive when ` +\n                        `updating cache for '${getFriendlyURL(request.url)}'.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheFirst } from './CacheFirst.js';\nimport { CacheOnly } from './CacheOnly.js';\nimport { NetworkFirst } from './NetworkFirst.js';\nimport { NetworkOnly } from './NetworkOnly.js';\nimport { StaleWhileRevalidate } from './StaleWhileRevalidate.js';\nimport './_version.js';\n/**\n * There are common caching strategies that most service workers will need\n * and use. This module provides simple implementations of these strategies.\n *\n * @module workbox-strategies\n */\nexport { CacheFirst, CacheOnly, NetworkFirst, NetworkOnly, StaleWhileRevalidate, };\n","export * from './index.js';","importScripts(\n  \"https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js\"\n);\n\nimport { registerRoute } from \"workbox-routing\";\nimport {\n  StaleWhileRevalidate,\n  NetworkFirst,\n} from \"workbox-strategies\";\n\nregisterRoute(\n  ({ request }) => request.destination === \"empty\",\n  new NetworkFirst({cacheName: 'ofline'})\n);\n\nregisterRoute(\n  ({url}) => url.pathname.startsWith('/'),\n  new StaleWhileRevalidate({cacheName: 'ofline'})\n);\n"]}